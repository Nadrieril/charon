# Final LLBC before serialization:

trait core::clone::Clone<Self>
{
    fn clone : core::clone::Clone::clone
    fn clone_from
}

trait core::borrow::Borrow<Self, Borrowed>
{
    fn borrow : core::borrow::Borrow::borrow
}

trait alloc::borrow::ToOwned<Self, Self_Owned>
{
    parent_clause_0 : [@TraitClause0]: core::borrow::Borrow<Self_Owned, Self>
    fn to_owned : alloc::borrow::ToOwned::to_owned
    fn clone_into
}

enum alloc::borrow::Cow<'a, B, Clause0_Owned>
  where
      [@TraitClause0]: alloc::borrow::ToOwned<B, Clause0_Owned>,
      B : 'a,
      B : 'a,
 =
|  Borrowed(&'a (B))
|  Owned(Clause0_Owned)


opaque type alloc::vec::Vec<T, A>

struct alloc::alloc::Global = {}

fn alloc::slice::{impl core::borrow::Borrow<Slice<T>> for alloc::vec::Vec<T, A>}#5::borrow<'_0, T, A>(@1: &'_0 (alloc::vec::Vec<T, A>)) -> &'_0 (Slice<T>)

impl<T, A> alloc::slice::{impl core::borrow::Borrow<Slice<T>> for alloc::vec::Vec<T, A>}#5<T, A> : core::borrow::Borrow<alloc::vec::Vec<T, A>, Slice<T>>
{
    fn borrow = alloc::slice::{impl core::borrow::Borrow<Slice<T>> for alloc::vec::Vec<T, A>}#5::borrow
}

fn alloc::slice::{impl alloc::borrow::ToOwned<alloc::vec::Vec<T, alloc::alloc::Global>> for Slice<T>}#9::to_owned<'_0, T>(@1: &'_0 (Slice<T>)) -> alloc::vec::Vec<T, alloc::alloc::Global>
where
    // Inherited clauses:
    [@TraitClause0]: core::clone::Clone<T>,

fn alloc::slice::{impl alloc::borrow::ToOwned<alloc::vec::Vec<T, alloc::alloc::Global>> for Slice<T>}#9::clone_into<'_0, '_1, T>(@1: &'_0 (Slice<T>), @2: &'_1 mut (alloc::vec::Vec<T, alloc::alloc::Global>))
where
    // Inherited clauses:
    [@TraitClause0]: core::clone::Clone<T>,

impl<T> alloc::slice::{impl alloc::borrow::ToOwned<alloc::vec::Vec<T, alloc::alloc::Global>> for Slice<T>}#9<T> : alloc::borrow::ToOwned<Slice<T>, alloc::vec::Vec<T, alloc::alloc::Global>>
where
    [@TraitClause0]: core::clone::Clone<T>,
{
    parent_clause0 = alloc::slice::{impl core::borrow::Borrow<Slice<T>> for alloc::vec::Vec<T, A>}#5<T, alloc::alloc::Global>
    fn to_owned = alloc::slice::{impl alloc::borrow::ToOwned<alloc::vec::Vec<T, alloc::alloc::Global>> for Slice<T>}#9::to_owned
    fn clone_into = alloc::slice::{impl alloc::borrow::ToOwned<alloc::vec::Vec<T, alloc::alloc::Global>> for Slice<T>}#9::clone_into
}

struct test_crate::Generic2<'a, T>
  where
      [@TraitClause0]: core::clone::Clone<T>,
      T : 'a,
 =
{
  alloc::borrow::Cow<'a, Slice<T>, alloc::slice::{impl alloc::borrow::ToOwned<alloc::vec::Vec<T, alloc::alloc::Global>> for Slice<T>}#9<T>[@TraitClause0]>
}

fn alloc::borrow::ToOwned::to_owned<'_0, Self, Self_Owned>(@1: &'_0 (Self)) -> Self_Owned

fn core::borrow::Borrow::borrow<'_0, Self, Borrowed>(@1: &'_0 (Self)) -> &'_0 (Borrowed)

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self



