# Final LLBC before serialization:

trait core::clone::Clone<Self>
{
    fn clone : core::clone::Clone::clone
    fn clone_from
}

trait core::marker::Copy<Self>
{
    parent_clause_0 : [@TraitClause0]: core::clone::Clone<Self>
}

trait test_crate::Foo<'a, Self, Self_Item>
where
    Self_Item : 'a,
{
    parent_clause_0 : [@TraitClause0]: core::marker::Copy<Self>
    parent_clause_1 : [@TraitClause1]: core::clone::Clone<Self_Item>
    fn use_item_required : test_crate::Foo::use_item_required
    fn use_item_provided : test_crate::Foo::use_item_provided
}

enum core::option::Option<T> =
|  None()
|  Some(T)


fn core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3::clone<'_0, '_1, T>(@1: &'_1 (&'_0 (T))) -> &'_0 (T)

impl<'_0, T> core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_0, T> : core::clone::Clone<&'_0 (T)>
{
    fn clone = core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3::clone
}

impl<'_0, T> core::marker::{impl core::marker::Copy for &'_0 (T)}#4<'_0, T> : core::marker::Copy<&'_0 (T)>
{
    parent_clause0 = core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, T>
}

fn core::option::{impl core::clone::Clone for core::option::Option<T>}#5::clone<'_0, T>(@1: &'_0 (core::option::Option<T>)) -> core::option::Option<T>
where
    // Inherited clauses:
    [@TraitClause0]: core::clone::Clone<T>,

fn core::option::{impl core::clone::Clone for core::option::Option<T>}#5::clone_from<'_0, '_1, T>(@1: &'_0 mut (core::option::Option<T>), @2: &'_1 (core::option::Option<T>))
where
    // Inherited clauses:
    [@TraitClause0]: core::clone::Clone<T>,

impl<T> core::option::{impl core::clone::Clone for core::option::Option<T>}#5<T> : core::clone::Clone<core::option::Option<T>>
where
    [@TraitClause0]: core::clone::Clone<T>,
{
    fn clone = core::option::{impl core::clone::Clone for core::option::Option<T>}#5::clone
    fn clone_from = core::option::{impl core::clone::Clone for core::option::Option<T>}#5::clone_from
}

fn test_crate::{impl test_crate::Foo<'a, core::option::Option<&'a (T)>> for &'a (T)}::use_item_required<'a, '_1, T>(@1: &'_1 (test_crate::{impl test_crate::Foo<'a, core::option::Option<&'a (T)>> for &'a (T)}<'_, T>::Item)) -> &'_1 (test_crate::{impl test_crate::Foo<'a, core::option::Option<&'a (T)>> for &'a (T)}<'_, T>::Item)
{
    let @0: &'_ (core::option::Option<&'_ (T)>); // return
    let x@1: &'_ (core::option::Option<&'_ (T)>); // arg #1

    @0 := copy (x@1)
    return
}

impl<'a, T> test_crate::{impl test_crate::Foo<'a, core::option::Option<&'a (T)>> for &'a (T)}<'a, T> : test_crate::Foo<'a, &'a (T), core::option::Option<&'a (T)>>
{
    parent_clause0 = core::marker::{impl core::marker::Copy for &'_0 (T)}#4<'_, T>
    parent_clause1 = core::option::{impl core::clone::Clone for core::option::Option<T>}#5<&'_ (T)>[core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, T>]
    fn use_item_required = test_crate::{impl test_crate::Foo<'a, core::option::Option<&'a (T)>> for &'a (T)}::use_item_required
}

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn test_crate::external_use_item<'a, T, Clause0_Item>(@1: Clause0_Item) -> Clause0_Item
where
    [@TraitClause0]: test_crate::Foo<'_, T, Clause0_Item>,
{
    let @0: @TraitClause0::Item; // return
    let x@1: @TraitClause0::Item; // arg #1
    let @2: &'_ (@TraitClause0::Item); // anonymous local

    @2 := &x@1
    @0 := (parents(@TraitClause0)::[@TraitClause1])::clone(move (@2))
    drop @2
    drop x@1
    return
}

fn test_crate::call_fn()
{
    let @0: (); // return
    let @1: core::option::Option<&'_ (bool)>; // anonymous local
    let @2: core::option::Option<&'_ (bool)>; // anonymous local
    let @3: (); // anonymous local

    @2 := core::option::Option::None {  }
    @1 := test_crate::external_use_item<'_, &'_ (bool)>[test_crate::{impl test_crate::Foo<'a, core::option::Option<&'a (T)>> for &'a (T)}<'_, bool>](move (@2))
    drop @2
    @fake_read(@1)
    drop @1
    @3 := ()
    @0 := move (@3)
    @0 := ()
    return
}

fn test_crate::type_equality<'a, I, J, Clause0_Item>(@1: Clause0_Item) -> Clause0_Item
where
    [@TraitClause0]: test_crate::Foo<'_, I, Clause0_Item>,
    [@TraitClause1]: test_crate::Foo<'_, J, Clause0_Item>,
{
    let @0: @TraitClause0::Item; // return
    let x@1: @TraitClause0::Item; // arg #1

    @0 := move (x@1)
    drop x@1
    return
}

trait test_crate::loopy::Bar<Self, Self_BarTy>

impl test_crate::loopy::{impl test_crate::loopy::Bar<bool> for ()} : test_crate::loopy::Bar<(), bool>

trait test_crate::loopy::Foo<Self>
{
    parent_clause_0 : [@TraitClause0]: test_crate::loopy::Bar<Self::FooTy, Self::Self_Clause0_BarTy>
    parent_clause_1 : [@TraitClause1]: test_crate::loopy::Foo<Self::FooTy>
    type FooTy
    type Self_Clause0_BarTy
}

impl test_crate::loopy::{impl test_crate::loopy::Foo for ()}#1 : test_crate::loopy::Foo<()>
{
    parent_clause0 = test_crate::loopy::{impl test_crate::loopy::Bar<bool> for ()}
    parent_clause1 = test_crate::loopy::{impl test_crate::loopy::Foo for ()}#1
    type FooTy = ()
    type Self_Clause0_BarTy = bool
}

trait test_crate::loopy::Baz<Self, T>
{
    parent_clause_0 : [@TraitClause0]: test_crate::loopy::Baz<T, T>
    parent_clause_1 : [@TraitClause1]: test_crate::loopy::Bar<T, Self::Self_Clause1_BarTy>
    type BazTy
    type Self_Clause1_BarTy
}

impl test_crate::loopy::{impl test_crate::loopy::Baz<()> for ()}#2 : test_crate::loopy::Baz<(), ()>
{
    parent_clause0 = test_crate::loopy::{impl test_crate::loopy::Baz<()> for ()}#2
    parent_clause1 = test_crate::loopy::{impl test_crate::loopy::Bar<bool> for ()}
    type BazTy = usize
    type Self_Clause1_BarTy = bool
}

trait test_crate::loopy_with_generics::Bar<'a, Self, T, U, Self_BarTy>

impl<'a, T> test_crate::loopy_with_generics::{impl test_crate::loopy_with_generics::Bar<'a, u8, T, &'a (T)> for ()}<'a, T> : test_crate::loopy_with_generics::Bar<'a, (), u8, T, &'a (T)>

trait test_crate::loopy_with_generics::Foo<'b, Self, T>
{
    parent_clause_0 : [@TraitClause0]: test_crate::loopy_with_generics::Bar<'b, Self::FooTy, u8, core::option::Option<T>, Self::Self_Clause0_BarTy>
    parent_clause_1 : [@TraitClause1]: test_crate::loopy_with_generics::Foo<'b, Self::FooTy, T>
    type FooTy
    type Self_Clause0_BarTy
}

impl test_crate::loopy_with_generics::{impl test_crate::loopy_with_generics::Foo<'static, u16> for ()}#1 : test_crate::loopy_with_generics::Foo<'static, (), u16>
{
    parent_clause0 = test_crate::loopy_with_generics::{impl test_crate::loopy_with_generics::Bar<'a, u8, T, &'a (T)> for ()}<'_, core::option::Option<u16>>
    parent_clause1 = test_crate::loopy_with_generics::{impl test_crate::loopy_with_generics::Foo<'static, u16> for ()}#1
    type FooTy = ()
    type Self_Clause0_BarTy = &'_ (core::option::Option<u16>)
}

trait core::borrow::Borrow<Self, Borrowed>
{
    fn borrow : core::borrow::Borrow::borrow
}

trait alloc::borrow::ToOwned<Self, Self_Owned>
{
    parent_clause_0 : [@TraitClause0]: core::borrow::Borrow<Self_Owned, Self>
    fn to_owned : alloc::borrow::ToOwned::to_owned
    fn clone_into
}

enum test_crate::cow::Cow<'a, B, Clause0_Owned>
  where
      [@TraitClause0]: alloc::borrow::ToOwned<B, Clause0_Owned>,
      B : 'a,
      B : 'a,
 =
|  Borrowed(&'a (B))
|  Owned(Clause0_Owned)


fn test_crate::Foo::use_item_required<'a, '_1, Self, Self_Item>(@1: &'_1 (Self_Item)) -> &'_1 (Self_Item)

fn test_crate::Foo::use_item_provided<'a, '_1, Self, Self_Item>(@1: &'_1 (Self_Item)) -> &'_1 (Self_Item)
{
    let @0: &'_ (Self::Item); // return
    let x@1: &'_ (Self::Item); // arg #1

    @0 := copy (x@1)
    return
}

fn alloc::borrow::ToOwned::to_owned<'_0, Self, Self_Owned>(@1: &'_0 (Self)) -> Self_Owned

fn core::borrow::Borrow::borrow<'_0, Self, Borrowed>(@1: &'_0 (Self)) -> &'_0 (Borrowed)



