# Final LLBC before serialization:

fn test_crate::rej_sample<'_0>(@1: &'_0 (Slice<u8>)) -> usize
{
    let @0: usize; // return
    let a@1: &'_ (Slice<u8>); // arg #1
    let sampled@2: usize; // local
    let @3: (); // anonymous local
    let @4: bool; // anonymous local
    let @5: u8; // anonymous local
    let @6: usize; // anonymous local
    let @7: bool; // anonymous local
    let @8: u8; // anonymous local
    let @9: usize; // anonymous local
    let @10: (); // anonymous local
    let @11: (); // anonymous local
    let @12: &'_ (Slice<u8>); // anonymous local
    let @13: &'_ (u8); // anonymous local
    let @14: &'_ (Slice<u8>); // anonymous local
    let @15: &'_ (u8); // anonymous local

    sampled@2 := const (0 : usize)
    @fake_read(sampled@2)
    @6 := const (0 : usize)
    @12 := &*(a@1)
    @13 := @SliceIndexShared<'_, u8>(move (@12), copy (@6))
    @5 := copy (*(@13))
    @4 := move (@5) < const (42 : u8)
    if move (@4) {
        drop @6
        drop @5
        @9 := const (1 : usize)
        @14 := &*(a@1)
        @15 := @SliceIndexShared<'_, u8>(move (@14), copy (@9))
        @8 := copy (*(@15))
        @7 := move (@8) < const (16 : u8)
        if move (@7) {
            drop @9
            drop @8
            sampled@2 := copy (sampled@2) + const (100 : usize)
            @11 := ()
            @3 := move (@11)
            drop @7
            drop @4
            drop @3
            sampled@2 := copy (sampled@2) + const (101 : usize)
            @0 := copy (sampled@2)
            drop sampled@2
            return
        }
        else {
            drop @9
            drop @8
        }
    }
    else {
        drop @6
        drop @5
    }
    @10 := ()
    @3 := move (@10)
    drop @7
    drop @4
    drop @3
    sampled@2 := copy (sampled@2) + const (101 : usize)
    @0 := copy (sampled@2)
    drop sampled@2
    return
}



